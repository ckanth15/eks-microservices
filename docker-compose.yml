version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: eks-postgres
    environment:
      POSTGRES_DB: eks_microservices
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service
  user-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.user-service
    container_name: eks-user-service
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: eks_microservices
      DB_USER: postgres
      DB_PASSWORD: password
      JWT_SECRET: your-secret-key-here
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/user-service:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.product-service
    container_name: eks-product-service
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: eks_microservices
      DB_USER: postgres
      DB_PASSWORD: password
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/product-service:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.order-service
    container_name: eks-order-service
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: eks_microservices
      DB_USER: postgres
      DB_PASSWORD: password
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/order-service:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: eks-frontend
    ports:
      - "3000:80"
    depends_on:
      - user-service
      - product-service
      - order-service
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: eks-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: eks-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: eks-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
